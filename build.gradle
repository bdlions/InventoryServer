apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'application'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
//applicationDefaultJvmArgs = ["-Dlogging.config=conf/log4j.properties", "-Dlog4j.configurationFile=conf/log4j2.xml", "-Xms1024m"]

task copyLibs(type: Copy) {
    from ('../AuthCommons/dist'){
        include 'AuthCommons.jar'
    }
    from ('../AuthSession/dist'){
        include 'AuthSession.jar'
    }
    from ('../AuthTransport/dist'){
        include 'AuthTransport.jar'
    }
    into project.file('lib')
}
// copy essential files into build directory
task processConfig(type: Copy) {
    from 'conf', {
        include '**/*.xml'
        include '**/*.properties'
        include '**/*.sql'
        //        into 'conf'
    }
    from 'resources', {
        include '**/*'
        into 'resources'
    }
    from 'mail-templates', {
        include '**/*'
        into 'mail-templates'
    }
    from('src/main/java') {
        include '**/*.properties'
        include '**/*.xml'
    }
    into 'build/classes/main'
}

task copyReports(type: Copy) {
    from 'reports', {
        include '**/*.jasper'
    }
    into 'build/classes/main/reports'
}

classes {
    classes.dependsOn processConfig, copyLibs, copyReports
}

compileJava.dependsOn copyLibs

war {
    baseName = 'InvServer'
    //version =  '1.0.0'
}



// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = 'org.bdlions.inventory.Main'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/release" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/libs-snapshot" }
    flatDir {
        dirs 'lib'
    }
    
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}
configurations {
    compile.exclude module: 'spring-boot-starter-logging'
    //    runtime.exclude group: "org.slf4j", module: "slf4j-log4j12"

}

dependencies {
    //maven repository dependency
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.0.0.M3'
    compile group: 'org.springframework', name: 'spring-context', version: '5.0.0.RC2'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.1'
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.10.Final'
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.7-dmr'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-alpha2'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.8.0-alpha2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    compile group: 'javax.mail', name: 'mail', version: '1.5.0-b01'
    compile group :'org.apache.shiro', name: 'shiro-core', version: '1.3.2'
    compile group: 'net.sf.jasperreports', name: 'jasperreports', version: '4.5.0'
    
    
    
    //external library dependency
    compile fileTree(dir: 'lib')
    
    //runtime dependency
    providedRuntime group : 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: '2.0.0.M3'    
    //providedRuntime group :'org.apache.shiro', name: 'shiro-core', version: '1.3.2'
    
    //test dependency
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.springframework', name: 'spring-test', version: '5.0.2.RELEASE'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
    
    
}

// copy dependency jars to build/libs/dependency-jars
task copyJarsToLib (type: Copy) {
    def toDir = "build/libs/lib"

    // create directories, if not already done:
    file(toDir).mkdirs()

    // copy jars to lib folder:
    from configurations.compile
    into toDir
}

jar {
    // exclude log properties (recommended)
    exclude ("log4j.properties")

    // make jar executable: see http://stackoverflow.com/questions/21721119/creating-runnable-jar-with-gradle
    manifest {
        attributes (
            'Main-Class': 'org.bdlions.inventory.JarRunner',
            // add classpath to Manifest; see http://stackoverflow.com/questions/30087427/add-classpath-in-manifest-file-of-jar-in-gradle
            "Class-Path": '. lib/' + configurations.compile.collect { it.getName() }.join(' lib/')
        )
    }
}

// always call copyJarsToLib when building jars:
jar.dependsOn copyJarsToLib
